flights |>
filter(2013)
flights |>
arrange(year=2013)
flights |>
distinct(year, month, day)|>
nrow()
flights>
flights |>
arrange(desc(distance))
flights |>
arrange(desc(distance))|>
relocate(distance)
flights |>
mutate(gain=dep_delay-arr_delay, speed = distance/(air_time*60))
flights |>
mutate(gain=dep_delay-arr_delay, speed = distance/(air_time*60))|>
.before=1
flights |>
mutate(gain=dep_delay-arr_delay, speed = distance/(air_time*60),.before=1)
flights |>
mutate(gain=dep_delay-arr_delay, speed = distance/(air_time*60),.after=day
)
library(nycflights13)
library(tidyverse)
nycflights13::flights
5!
factorial(5)
factorial(0)
help(operations)
??operations
help(mathfunctions)
help("Math2")
log(help)
log(54)
log(10,54)
dpois(1,3)
dpois(2,3)
dpois(4,3)
pnorm(2.18)
pnorm(-2.18)
dpois(8,1.6)
pnorm(125,120,18)
1-pnorm(125,120,18)
pnorm(100,120,18)
pnorm(124,120,18)-pnorm(110,120,18)
pnorm(138,120,18)-pnorm(102,120,18)
pnorm(120.01,120,18)-pnorm(119.99,120,18)
print("hello world")
string_object <- "derp"
string_object = "quack"
numeric_object <- 5
numeric_object + 2
vector_object <- c("schwarber", "turner", "harper", "bohm", "realmuto", "castellanos", "stott", "sosa", "rojas")
library(tidyverse)
library(sf)
install.packages('sf')
library(sf)
phila_tracts <- read.csv("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_2020.csv")
glimpse(phila_tracts)
view(phila_tracts)
glimpse(phila_tracts)
??glimpse
library(dplyr)
glimpse(phila_tracts)
mean(phila_tracts$pop)
just_two_columns <- phila_tracts %>%
select(GEOID, tract)
View(just_two_columns)
some_new_column_names <- phila_tracts %>%
rename(tracty_mctracterson = tract,
unique_ID = GEOID)
View(some_new_column_names)
View(phila_tracts)
phila_tracts <- phila_tracts %>%
mutate(pct_own = 100*(owner_hh/hhs),
majority_white = ifelse(pct_wht > 50, "Majority White", "Majority Non-White"))
View(phila_tracts)
phila_tracts_sf <- st_read("https://raw.githubusercontent.com/mafichman/cpln_0795/main/data/philadelphia_tracts_no_data.geojson")
glimpse(phila_tracts_sf)
phila_tracts %>%
group_by(majority_white)%>%
summarize(total_pop = sum(pop))
glimpse(phila_tracts_sf)
View(phila_tracts_sf)
st_crs(phila_tracts_sf)
phila_tracts_sf %>%
st_transform(crs = 2272)
tracts_with_data <- left_join(phila_tracts_sf, phila_tracts, by = "NAME")
glimpse(tracts_with_data)
tracts_with_data <- tracts_with_data %>%
select(-tract.y, -GEOID.y) %>%
rename(GEOID = GEOID.x,
tract = tract.x)
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc))
library(ggplot2)
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc))
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
theme_bw()
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "The Average Tract's Median HH Income is appx $26,700",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
ggplot()+
geom_histogram(data = tracts_with_data,
aes(med_inc)) +
facet_wrap(~majority_white)+
labs(
title = "Median Household Income, Philadelphia Census Tracts, 2020",
subtitle = "The Average Tract's Median HH Income is appx $26,700",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
ggplot()+
geom_sf(data = tracts_with_data,
aes(fill = med_inc), color = "transparent")+
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
```{r, echo=FALSE, message=FALSE}
# Load required libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
install.packages("tidycensus")
install.packages("tigris")
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
census_api_key("eeb46a4e68d059982c2b048f843063e19bc4c294", overwrite = TRUE)
acs_variable_list <- load_variables(2020, #year
"acs5", #five year ACS estimates
cache = TRUE)
View(acs_variable_list)
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"C02003_004E", # One race black
"C02003_003E", # One race white
"B03001_003E", # Hispanic (all)
"B02001_005E", # AAPI
"B11012_001E", # n Households
"B08137_003E", # Renter hh
"B08137_002E", # owner hh
"B06011_001E") # Median income in past 12 months
View(acs_variable_list)
??get_acs
acs2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide")
View(acs2020)
study_areas <- st_read("https://raw.githubusercontent.com/mafichman/cpln_6890/refs/heads/main/study_areas/2025/geojson/study_areas_2025.geojson")
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
study_areas <- st_read("https://raw.githubusercontent.com/mafichman/cpln_6890/refs/heads/main/study_areas/2025/geojson/study_areas_2025.geojson")
setwd("~/")
setwd("C:/Users/astau/OneDrive - PennO365/MUSA_5080_PPA/portfolio-setup-astauf03")
setwd("C:/Users/astau/OneDrive - PennO365/MUSA_5080_PPA/portfolio-setup-astauf03")
get wd()
getwd()
library(tidyverse)
car_data <- read_csv("data/car_sales_data.csv")
car_data <- read_csv("data/car_sales_data.csv")
head(car_data)
View(car_data)
# Assuming 'my_dataframe' is the name of your data frame
num_columns <- ncol(car_data)
print(num_columns)
car_df <- as.data.frame(car_data)
view(car_df)
car_df
car_data
# Select just Model and Mileage columns
# Select Manufacturer, Price, and Fuel type
# Challenge: Select all columns EXCEPT Engine Size
# Select just Model and Mileage columns
# Select Manufacturer, Price, and Fuel type
# Challenge: Select all columns EXCEPT Engine Size
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data, n = 10)
select(car_data, Model, Milage)
select(car_data, Model, Mileage)
select(car_data,Manufacturer, Price, Fuel type)
select(car_data,Manufacturer, Price, 'Fuel type')
select(car_data,Manufacturer, Price, `Fuel type`)
select(car_data,Manufacturer, Price, `Fuel type`)
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- cars_data %>%
select(!`Engine Size`)
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- car_data %>%
select(!`Engine Size`)
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- select(car_data,!`Engine size`)
# Rename 'Year of manufacture' to year
rename(car_data, `Year of manufacture` = year)
# Rename 'Year of manufacture' to year
rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
View(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data %>%
select(year)%>%
mutate(age, 2025 - year)
# Create an 'age' column (2025 minus year of manufacture)
mutate(car_data, age = 2025 - year)
# Rename 'Year of manufacture' to year
rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Rename 'Year of manufacture' to year
rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Rename 'Year of manufacture' to year
rename= (car_data, year = `Year of manufacture`)
# Rename 'Year of manufacture' to year
car_data = rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Create an 'age' column (2025 minus year of manufacture)
mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
updated_data <- mutate(car_data, new_column = mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
updated_data <- mutate(car_data, new_column = calculation)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
car_data <- mutate(car_data,mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
View(car_data)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data, n = 10)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- select(car_data,!`Engine size`)
# Rename 'Year of manufacture' to year
car_data = rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
car_data <- mutate(car_data,mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
View(car_data)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(Price = case_when(
Price < 15000 ~ "budget"
Price >= 15000 & Price <= 30000 ~ "mid-range"
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(Price = case_when(
Price < 15000 ~ "budget"
Price >= 15000 & Price <= 30000 ~ "mid-range",
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(Price = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
select(car_data, Price)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data, n = 10)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- select(car_data,!`Engine size`)
# Rename 'Year of manufacture' to year
car_data = rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
car_data <- mutate(car_data,mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
select(car_data, Price)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
select(car_data, Price, price_category)
# Find all Toyota cars
toyota_cars = filter(car_data, Manufacturer, Toyota)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == Toyota)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
# Find luxury cars (from price category) with low mileage
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Milage < 30,000)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Mileage < 30,000)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
lux_low_mileage <- filter(car_data, price_category == "high-end", Mileage < 30000)
View(lux_low_mileage)
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
# Find diesel cars less than 10 years old
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
young_diesel <- filter(car_data, `Fuel type` =="Diesel", age<10 )
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
young_diesel <- filter(car_data, `Fuel type` =="Diesel", age<10 )
head(young_diesel)
View(young_diesel)
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
young_diesel <- filter(car_data, `Fuel type` =="Diesel", age<10 )
head(young_diesel)
car_data %>%
filter(`Fuel type` == "Diesel", age < 10) %>%
count()
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
# Count cars by manufacturer
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_mileage_by_fuel <- car_data %>%
group_by(`Fuel type`)%>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_mileage_by_fuel
# Count cars by manufacturer
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_mileage_by_fuel <- car_data %>%
group_by(`Fuel type`)%>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_mileage_by_fuel
# Count cars by manufacturer
cars_by_manufacturer <- car_data %>%
count(Manufacturer)
cars_by_manufacturer
# Frequency table for price categories
price_category_freq <- county(car_data, price_category)
# Frequency table for price categories
price_category_freq <- count(car_data, price_category)
# Frequency table for price categories
price_category_freq <- count(car_data, price_category)
price_category_freq
installed.packages()
.libPaths()
install.packages(c("ggplot2", "dplyr","knitr"))
.libPaths()
Rscript --version
.libPaths()
install.packages(c("knitr","rmarkdown","dplyr","ggplot2"), lib="C:/Users/YourName/AppData/Local/R/win-library/4.4")
file.edit(Sys.getenv("HOME"), ".Renviron")
R_LIBS_USER="C:/Users/astauf/R/library"
R_LIBS_USER="C:/Users/astau/R/library"
install.packages(c("knitr","rmarkdown","dplyr","ggplot2"), lib="C:/Users/astau/AppData/Local/R/win-library/4.4")
install.packages(c("knitr","rmarkdown","dplyr","ggplot2"), lib="C:/Users/astau/AppData/Local/R/win-library/4.4")
