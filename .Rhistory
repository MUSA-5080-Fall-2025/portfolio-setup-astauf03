MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE)
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft <- moe_gogegic_schoolcraft%>%
mutate(
MOE_flag = ifelse(MOE_white > 15 | MOE_black > 15 |  MOE_latinx > 15),
TRUE,
FALSE
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE)
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft <- moe_gogegic_schoolcraft%>%
mutate(
MOE_flag = ifelse(MOE_white > 15 | MOE_black > 15 |  MOE_latinx > 15,
TRUE,
FALSE)
)
# Create summary statistics showing how many tracts have data quality issues
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE)
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft <- moe_gogegic_schoolcraft%>%
mutate(
MOE_flag = ifelse(MOE_white > .15 | MOE_black > .15 |  MOE_latinx > .15,
TRUE,
FALSE)
)
# Create summary statistics showing how many tracts have data quality issues
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE),
MOE_flag = ifelse(MOE_white > 15 | MOE_black > 15 |  MOE_latinx > 15,
TRUE,
FALSE
)
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
# Create summary statistics showing how many tracts have data quality issues
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE),
MOE_flag = ifelse(MOE_white > 15 | MOE_black > 15 |  MOE_latinx > 15,
TRUE,
FALSE
)
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft <- moe_gogegic_schoolcraft %>%
mutate(
MOE_white  = as.numeric(MOE_white),
MOE_black  = as.numeric(MOE_black),
MOE_latinx = as.numeric(MOE_latinx),
MOE_flag   = ifelse(
MOE_white > 15 | MOE_black > 15 | MOE_latinx > 15,
TRUE,
FALSE
)
)
# Create summary statistics showing how many tracts have data quality issues
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE),
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft <- moe_gogegic_schoolcraft %>%
mutate(
MOE_white  = as.numeric(MOE_white),
MOE_black  = as.numeric(MOE_black),
MOE_latinx = as.numeric(MOE_latinx),
MOE_flag   = ifelse(
MOE_white > 15 | MOE_black > 15 | MOE_latinx > 15,
TRUE,
FALSE
)
)
# Create summary statistics showing how many tracts have data quality issues
View(moe_gogegic_schoolcraft)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE),
MOE_flag = ifelse(MOE_white > 15 | MOE_black > 15 |  MOE_latinx > 15,
TRUE,
FALSE
)
)
# Create summary statistics showing how many tracts have data quality issues
moe_summary_county <- moe_gogegic_schoolcraft %>%
group_by(county_name) %>%
summarize(
total_tracts    = n(),
high_MOE_tracts = sum(MOE_flag, na.rm = TRUE),
pct_high_MOE    = round(100 * high_MOE_tracts / total_tracts, 1)
)
kable (
moe_summary_county,
caption: "MOE Summary"
)
kable (
moe_summary_county,
caption = "MOE Summary"
)
kable (
moe_summary_county,
caption = "MOE Summary",
row.names = TRUE,
col.names = c("County", "Total Tracts", "High MOE Tracts", "Percent High MOE")
)
kable (
moe_summary_county,
caption = "MOE Summary",
row.names = TRUE,
col.names = c("County", "Total Tracts", "High MOE Tracts", "Percent High MOE"),
align = c("l","c","c","r")
)
kable (
moe_summary_county,
caption = "**MOE Summary**",
row.names = TRUE,
col.names = c("County", "Total Tracts", "High MOE Tracts", "Percent High MOE"),
align = c("l","c","c","r")
)
kable (
moe_summary_county,
caption = "**MOE Summary**",
row.names = TRUE,
col.names = c("County", "Total Tracts", "High MOE Tracts", "Percent High MOE(%)"),
align = c("l","c","c","r")
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE),
MOE_flag = ifelse(MOE_white > 15 | MOE_black > 15 |  MOE_latinx > 15,
TRUE,
FALSE
)
)
# Create summary statistics showing how many tracts have data quality issues
moe_summary_county <- moe_gogegic_schoolcraft %>%
group_by(county_name) %>%
summarize(
total_tracts    = n(),
high_MOE_tracts = sum(MOE_flag, na.rm = TRUE),
pct_high_MOE    = round(100 * high_MOE_tracts / total_tracts, 1)
)
kable (
moe_summary_county,
caption = "**MOE Summary**",
row.names = TRUE,
col.names = c("County", "Total Tracts", "High MOE Tracts", "Percent High MOE(%)"),
align = c("l","c","c","r")
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
moe_gogegic_schoolcraft = race_vars_percts %>%
mutate(
MOE_white = (whiteM/whiteE) * 100,
MOE_black = (blackM/blackE) * 100,
MOE_latinx = (hisp_latinxM/hisp_latinxE) * 100,
MOE_flag = ifelse(MOE_white > 15 | MOE_black > 15 |  MOE_latinx > 15,
TRUE,
FALSE
)
)
# Create summary statistics showing how many tracts have data quality issues
moe_summary_county <- moe_gogegic_schoolcraft %>%
group_by(county_name) %>%
summarize(
total_tracts    = n(),
high_MOE_tracts = sum(MOE_flag, na.rm = TRUE),
pct_high_MOE    = round(100 * high_MOE_tracts / total_tracts, 1)
)
kable (
moe_summary_county,
caption = "**MOE Summary**",
row.names = TRUE,
col.names = c("County", "Total Tracts", "High MOE Tracts", "Percent High MOE(%)"),
align = c("l","c","c","r")
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
moe_patterns <- moe_gogegic_schoolcraft %>%
group_by(MOE_flag) %>%
summarize(
avg_pop     = mean(total_pop, na.rm = TRUE),
avg_white   = mean(perct_white, na.rm = TRUE),
avg_black   = mean(perct_black, na.rm = TRUE),
avg_latinx  = mean(perct_latinx, na.rm = TRUE),
n_tracts    = n()
)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
moe_patterns <- moe_gogegic_schoolcraft %>%
group_by(MOE_flag) %>%
summarize(
avg_pop     = mean(total_popE, na.rm = TRUE),
avg_white   = mean(perct_white, na.rm = TRUE),
avg_black   = mean(perct_black, na.rm = TRUE),
avg_latinx  = mean(perct_latinx, na.rm = TRUE),
n_tracts    = n()
)
kable(moe_patterns,
caption = "Comparison of High-MOE vs Reliable Tracts")
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
moe_patterns <- moe_gogegic_schoolcraft %>%
group_by(county_name, MOE_flag) %>%
summarize(
avg_pop     = mean(total_popE, na.rm = TRUE),
avg_white   = mean(perct_white, na.rm = TRUE),
avg_black   = mean(perct_black, na.rm = TRUE),
avg_latinx  = mean(perct_latinx, na.rm = TRUE),
n_tracts    = n()
)
kable(moe_patterns,
caption = "Comparison of High-MOE vs Reliable Tracts",
col.names = c("Flag"))
kable(moe_patterns,
caption = "Comparison of High-MOE vs Reliable Tracts")
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
moe_patterns <- moe_gogegic_schoolcraft %>%
group_by(county_name, MOE_flag) %>%
summarize(
avg_pop     = mean(total_popE, na.rm = TRUE),
avg_white   = mean(perct_white, na.rm = TRUE),
avg_black   = mean(perct_black, na.rm = TRUE),
avg_latinx  = mean(perct_latinx, na.rm = TRUE),
n_tracts    = n()
)
kable(moe_patterns,
caption = "Comparison of High-MOE vs Reliable Tracts",
col.names = c("County", "Flag Status", "Population Average", "% White Avg", "% Black Avg", "% LatinX", "Tracts Quantity"))
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
kable(moe_patterns,
caption = "Comparison of High-MOE vs Reliable Tracts",
align = c("l", "c", "c", "c","c","c","r")
col.names = c("County", "Flag Status", "Population Average", "% White Avg", "% Black Avg", "% LatinX", "Tracts Quantity"))
kable(moe_patterns,
caption = "Comparison of High-MOE vs Reliable Tracts",
align = c("l", "c", "c", "c","c","c","r"),
col.names = c("County", "Flag Status", "Population Average", "% White Avg", "% Black Avg", "% LatinX", "Tracts Quantity"))
kable(moe_patterns,
caption = "**Comparison of High-MOE vs Reliable Tracts**",
align = c("l", "c", "c", "c","c","c","r"),
col.names = c("County", "Flag Status", "Population Average", "% White Avg", "% Black Avg", "% LatinX", "Tracts Quantity"))
View(race_vars)
View(race_vars_percts)
View(race_vars_percts)
View(MI_county_reliablility)
View(MI_reability_data)
View(selected_counties)
View(moe_summary_county)
View(race_vars)
View(top5_byMOE)
View(moe_patterns)
?kable
kable(moe_patterns,
caption = "**Comparison of High-MOE vs Reliable Tracts**",
align = c("l", "c", "c", "c","c","c","r"),
col.names = c("County", "Flag Status", "Population Average", "% White Avg", "% Black Avg", "% LatinX", "Tracts Quantity"),
digits = 2
)
View(moe_gogegic_schoolcraft)
View(moe_gogegic_schoolcraft)
View(avg_demo)
View(avg_demo)
View(county_data_2022)
View(race_vars_percts)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
sum_table = selected_counties %>%
select(
county_name = county_data_2022_clean,
med_inc = med_household_incomeE,
moe_pct = med_income_moe_pct) %>%
mutate(
recs = case_when(
moe_pct < 5 ~ "Safe for algorithmic decisions",
moe_pct < 10 ~ "Use with caution - monitor",
TRUE ~ "Requires manual review or additional data"
)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
# Format as a professional table with kable()
View(sum_table)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
sum_table = selected_counties %>%
select(
county_name = county_data_2022_clean,
med_inc = med_household_incomeE,
moe_pct = med_income_moe_pct) %>%
mutate(
recs = case_when(
moe_pct < 5 ~ "Safe for algorithmic decisions",
moe_pct < 10 ~ "Use with caution - monitor outcomes",
TRUE ~ "Requires manual review or additional data"
)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
kable(sum_table,
caption = "Algorithm Recommendations",
col.names = c("County", "Median Income", "MOE %", "Recommendation")
digits = 2
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
sum_table = selected_counties %>%
select(
county_name = county_data_2022_clean,
med_inc = med_household_incomeE,
moe_pct = med_income_moe_pct) %>%
mutate(
recs = case_when(
moe_pct < 5 ~ "Safe for algorithmic decisions",
moe_pct < 10 ~ "Use with caution - monitor outcomes",
TRUE ~ "Requires manual review or additional data"
)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
kable(sum_table,
caption = "Algorithm Recommendations",
col.names = c("County", "Median Income", "MOE %", "Recommendation"),
digits = 2
)
# Format as a professional table with kable()
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
sum_table = selected_counties %>%
select(
county_name = county_data_2022_clean,
med_inc = med_household_incomeE,
moe_pct = med_income_moe,
conf_interval = med_income_confi
) %>%
mutate(
recs = case_when(
moe_pct < 5 ~ "Safe for algorithmic decisions",
moe_pct < 10 ~ "Use with caution - monitor outcomes",
TRUE ~ "Requires manual review or additional data"
)
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
sum_table = selected_counties %>%
select(
county_name = county_data_2022_clean,
med_inc = med_household_incomeE,
moe_pct = med_income_moe_pct,
conf_interval = med_income_confi
) %>%
mutate(
recs = case_when(
moe_pct < 5 ~ "Safe for algorithmic decisions",
moe_pct < 10 ~ "Use with caution - monitor outcomes",
TRUE ~ "Requires manual review or additional data"
)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
kable(sum_table,
caption = "**Algorithm Recommendations**",
col.names = c("County", "Median Income", "MOE %", "Recommendation"),
digits = 2
align = c("l", "c", "c", )
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
sum_table = selected_counties %>%
select(
county_name = county_data_2022_clean,
med_inc = med_household_incomeE,
moe_pct = med_income_moe_pct,
conf_interval = med_income_confi
) %>%
mutate(
recs = case_when(
moe_pct < 5 ~ "Safe for algorithmic decisions",
moe_pct < 10 ~ "Use with caution - monitor outcomes",
TRUE ~ "Requires manual review or additional data"
)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
kable(sum_table,
caption = "**Algorithm Recommendations**",
col.names = c("County", "Median Income", "MOE %", "Confidence Interval", "Recommendation"),
digits = 2,
align = c("l", "c", "c", "c", "r")
)
# Format as a professional table with kable()
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
sum_table = selected_counties %>%
select(
county_name = county_data_2022_clean,
med_inc = med_household_incomeE,
moe_pct = med_income_moe_pct,
conf_interval = med_income_confi
) %>%
mutate(
recs = case_when(
moe_pct < 5 ~ "Safe for algorithmic decisions",
moe_pct < 10 ~ "Use with caution - monitor outcomes",
TRUE ~ "Requires manual review or additional data"
)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
kable(sum_table,
caption = "**Algorithm Recommendations**",
col.names = c("County", "Median Income", "MOE (%)", "Confidence Interval", "Recommendation"),
digits = 2,
align = c("l", "c", "c", "c", "r")
)
# Format as a professional table with kable()
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties = top5_byMOE %>%
filter(med_household_incomeE == 55071 | med_household_incomeE == 47913)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties %>%
select(county_data_2022_clean, med_household_incomeE, med_income_moe_pct, med_income_confi) %>%
kable(
caption = "**Schoolcraft and Gogebic County Demographics**",
align = c("l", "c", "c", "r"),
row.names = TRUE,
col.names = c("County Name", "Median Income", "MOE (%)", "Reliability Category")
)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties = top5_byMOE %>%
filter(med_household_incomeE == 55071 | med_household_incomeE == 47913)
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties %>%
select(county_data_2022_clean, med_household_incomeE, med_income_moe_pct, med_income_confi) %>%
kable(
caption = "**Schoolcraft and Gogebic County Income Demographics**",
align = c("l", "c", "c", "r"),
row.names = TRUE,
col.names = c("County Name", "Median Income", "MOE (%)", "Reliability Category")
)
View(race_vars_percts)
