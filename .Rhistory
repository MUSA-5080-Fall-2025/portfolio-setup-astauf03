subtitle = "The Average Tract's Median HH Income is appx $26,700",
x="Dollars (not inflation adjusted)",
y="Number of Tracts",
caption = "Data: American Community Survey 5-year estimates")+
theme_bw()
ggplot()+
geom_sf(data = tracts_with_data,
aes(fill = med_inc), color = "transparent")+
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
```{r, echo=FALSE, message=FALSE}
# Load required libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
install.packages("tidycensus")
install.packages("tigris")
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
census_api_key("eeb46a4e68d059982c2b048f843063e19bc4c294", overwrite = TRUE)
acs_variable_list <- load_variables(2020, #year
"acs5", #five year ACS estimates
cache = TRUE)
View(acs_variable_list)
acs_vars <- c("B01001_001E", # ACS total Pop estimate
"C02003_004E", # One race black
"C02003_003E", # One race white
"B03001_003E", # Hispanic (all)
"B02001_005E", # AAPI
"B11012_001E", # n Households
"B08137_003E", # Renter hh
"B08137_002E", # owner hh
"B06011_001E") # Median income in past 12 months
View(acs_variable_list)
??get_acs
acs2020 <- get_acs(geography = "tract",
year = 2020,
variables = acs_vars,
geometry = TRUE,
state = "PA",
county = "Philadelphia",
output = "wide")
View(acs2020)
study_areas <- st_read("https://raw.githubusercontent.com/mafichman/cpln_6890/refs/heads/main/study_areas/2025/geojson/study_areas_2025.geojson")
knitr::opts_chunk$set(echo = TRUE)
# Load required libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(tigris)
study_areas <- st_read("https://raw.githubusercontent.com/mafichman/cpln_6890/refs/heads/main/study_areas/2025/geojson/study_areas_2025.geojson")
setwd("~/")
setwd("C:/Users/astau/OneDrive - PennO365/MUSA_5080_PPA/portfolio-setup-astauf03")
setwd("C:/Users/astau/OneDrive - PennO365/MUSA_5080_PPA/portfolio-setup-astauf03")
get wd()
getwd()
library(tidyverse)
car_data <- read_csv("data/car_sales_data.csv")
car_data <- read_csv("data/car_sales_data.csv")
head(car_data)
View(car_data)
# Assuming 'my_dataframe' is the name of your data frame
num_columns <- ncol(car_data)
print(num_columns)
car_df <- as.data.frame(car_data)
view(car_df)
car_df
car_data
# Select just Model and Mileage columns
# Select Manufacturer, Price, and Fuel type
# Challenge: Select all columns EXCEPT Engine Size
# Select just Model and Mileage columns
# Select Manufacturer, Price, and Fuel type
# Challenge: Select all columns EXCEPT Engine Size
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data, n = 10)
select(car_data, Model, Milage)
select(car_data, Model, Mileage)
select(car_data,Manufacturer, Price, Fuel type)
select(car_data,Manufacturer, Price, 'Fuel type')
select(car_data,Manufacturer, Price, `Fuel type`)
select(car_data,Manufacturer, Price, `Fuel type`)
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- cars_data %>%
select(!`Engine Size`)
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- car_data %>%
select(!`Engine Size`)
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- select(car_data,!`Engine size`)
# Rename 'Year of manufacture' to year
rename(car_data, `Year of manufacture` = year)
# Rename 'Year of manufacture' to year
rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
View(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data %>%
select(year)%>%
mutate(age, 2025 - year)
# Create an 'age' column (2025 minus year of manufacture)
mutate(car_data, age = 2025 - year)
# Rename 'Year of manufacture' to year
rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Rename 'Year of manufacture' to year
rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Rename 'Year of manufacture' to year
rename= (car_data, year = `Year of manufacture`)
# Rename 'Year of manufacture' to year
car_data = rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Create an 'age' column (2025 minus year of manufacture)
mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
updated_data <- mutate(car_data, new_column = mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
updated_data <- mutate(car_data, new_column = calculation)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
car_data <- mutate(car_data,mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
View(car_data)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data, n = 10)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- select(car_data,!`Engine size`)
# Rename 'Year of manufacture' to year
car_data = rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
car_data <- mutate(car_data,mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
View(car_data)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(Price = case_when(
Price < 15000 ~ "budget"
Price >= 15000 & Price <= 30000 ~ "mid-range"
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(Price = case_when(
Price < 15000 ~ "budget"
Price >= 15000 & Price <= 30000 ~ "mid-range",
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(Price = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
select(car_data, Price)
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Check the column names
# Look at the first few rows
head(car_data, n = 10)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Select just Model and Mileage columns
car_mile <- select(car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_shop <- select(car_data,Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
no_engines <- select(car_data,!`Engine size`)
# Rename 'Year of manufacture' to year
car_data = rename(car_data, year = `Year of manufacture`)
# Check that it worked
names(car_data)
head(car_data)
# Create an 'age' column (2025 minus year of manufacture)
car_data <- mutate(car_data, age = 2025 - year)
# Create a mileage_per_year column
car_data <- mutate(car_data,mileage_per_year = Mileage/age)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
select(car_data, Price)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(
Price < 15000 ~ "budget",
Price >= 15000 & Price <= 30000 ~ "mid-range",
Price > 30000 ~ "high-end"
))
# Check your categories select the new column and show it
select(car_data, Price, price_category)
# Find all Toyota cars
toyota_cars = filter(car_data, Manufacturer, Toyota)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == Toyota)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
# Find luxury cars (from price category) with low mileage
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Milage < 30,000)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Mileage < 30,000)
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
# Find all Toyota cars
toyota_cars <- filter(car_data, Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
low_milage <- filter(car_data, Mileage < 30000)
# Find luxury cars (from price category) with low mileage
lux_low_mileage <- filter(car_data, price_category == "high-end", Mileage < 30000)
View(lux_low_mileage)
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
# Find diesel cars less than 10 years old
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
young_diesel <- filter(car_data, `Fuel type` =="Diesel", age<10 )
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
young_diesel <- filter(car_data, `Fuel type` =="Diesel", age<10 )
head(young_diesel)
View(young_diesel)
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- filter(car_data, Manufacturer == "Honda" | Manufacturer == "Nissan")
# Find cars with price between $20,000 and $35,000
price_point <- filter(car_data, Price >= 20000 & Price <= 35000 )
# Find diesel cars less than 10 years old
young_diesel <- filter(car_data, `Fuel type` =="Diesel", age<10 )
head(young_diesel)
car_data %>%
filter(`Fuel type` == "Diesel", age < 10) %>%
count()
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
# Count cars by manufacturer
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_mileage_by_fuel <- car_data %>%
group_by(`Fuel type`)%>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_mileage_by_fuel
# Count cars by manufacturer
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_mileage_by_fuel <- car_data %>%
group_by(`Fuel type`)%>%
summarize(avg_mileage = mean(Mileage, na.rm = TRUE))
avg_mileage_by_fuel
# Count cars by manufacturer
cars_by_manufacturer <- car_data %>%
count(Manufacturer)
cars_by_manufacturer
# Frequency table for price categories
price_category_freq <- county(car_data, price_category)
# Frequency table for price categories
price_category_freq <- count(car_data, price_category)
# Frequency table for price categories
price_category_freq <- count(car_data, price_category)
price_category_freq
installed.packages()
.libPaths()
install.packages(c("ggplot2", "dplyr","knitr"))
.libPaths()
Rscript --version
.libPaths()
install.packages(c("knitr","rmarkdown","dplyr","ggplot2"), lib="C:/Users/YourName/AppData/Local/R/win-library/4.4")
file.edit(Sys.getenv("HOME"), ".Renviron")
R_LIBS_USER="C:/Users/astauf/R/library"
R_LIBS_USER="C:/Users/astau/R/library"
install.packages(c("knitr","rmarkdown","dplyr","ggplot2"), lib="C:/Users/astau/AppData/Local/R/win-library/4.4")
install.packages(c("knitr","rmarkdown","dplyr","ggplot2"), lib="C:/Users/astau/AppData/Local/R/win-library/4.4")
.libPaths()
census_api_key("eeb46a4e68d059982c2b048f843063e19bc4c294")
library(tidycensus)
library(tidyverse)
library(knitr)
census_api_key("eeb46a4e68d059982c2b048f843063e19bc4c294")
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("eeb46a4e68d059982c2b048f843063e19bc4c294")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "MI"
acs_vars_2022 <- get_acs(geography = "county",
varaibles = c(median_household_income = "B19013_001", total_pop = "B01003_001" ),
year = 2022,
survey = "acs5",
output = "wide")
acs_vars_2022 <- get_acs(geography = "county",
variables = c(median_household_income = "B19013_001", total_pop = "B01003_001" ),
year = 2022,
survey = "acs5",
output = "wide")
View(acs_vars_2022)
acs_vars_2022 <- get_acs(geography = "county",
state = "MI"
variables = c(median_household_income = "B19013_001", total_pop = "B01003_001" ),
acs_vars_2022 <- get_acs(geography = "county",
state = "MI",
variables = c(median_household_income = "B19013_001", total_pop = "B01003_001" ),
year = 2022,
survey = "acs5",
output = "wide")
View(acs_vars_2022)
acs_vars_2022_clean = mutate(acs_vars_2022, str_remove("Michigan" & "County"))
acs_vars_2022_clean = mutate(acs_vars_2022, name_clean = str_remove("County"), name_clean_2 = str_remove("Michigan"))
acs_vars_2022_clean = mutate(acs_vars_2022$NAME, name_clean = str_remove("County"), name_clean_2 = str_remove("Michigan"))
county_data_2022 <- get_acs(geography = "county",
state = "MI",
variables = c(median_household_income = "B19013_001", total_pop = "B01003_001" ),
year = 2022,
survey = "acs5",
output = "wide")
View(acs_vars_2022)
View(acs_vars_2022)
View(county_data_2022)
county_data_2022 <- county_data_2022 %>%
mutate(county_data_2022_clean = str_remove(NAME,paste0(",")))
View(county_data_2022)
county_data_2022 <- county_data_2022 %>%
mutate(county_data_2022_clean = str_remove(NAME,paste0("County, Michigan")))
View(county_data_2022)
glimpse(county_data_2022)
MI_county_reliablility <- county_data_2022 %>%
mutate(
med_income_moe_pct = (median_household_incomeM / median_household_incomeE) * 100,
med_income_confi = case_when(
median_household_incomeM < .05 ~ "High Confidence (<5%)",
median_household_incomeM > .05 & median_household_incomeM <.10 ~ "Moderate Confidence (5% - 10%)",
median_household_incomeM > .1  ~ "Low Confidence (>10%)"
)
)
# C
View(MI_county_reliablility)
summary(county_data_2022$median_household_incomeE)
summary(county_data_2022$median_household_incomeM)
View(MI_county_reliablility)
MI_county_reliablility <- county_data_2022 %>%
mutate(
med_income_moe_pct = (median_household_incomeM / median_household_incomeE) * 100,
med_income_confi = case_when(
med_income_moe_pct < .05 ~ "High Confidence (<5%)",
med_income_moe_pct > .05 & median_household_incomeM <.10 ~ "Moderate Confidence (5% - 10%)",
med_income_moe_pct > .1  ~ "Low Confidence (>10%)"
)
)
View(MI_county_reliablility)
county_data_2022 %>%
mutate(med_income_moe_pct = (median_household_incomeM / median_household_incomeE) * 100) %>%
select(NAME, median_household_incomeE, median_household_incomeM, med_income_moe_pct) %>%
arrange(desc(med_income_moe_pct)) %>%
head(10)
MI_county_reliablility <- county_data_2022 %>%
mutate(
med_income_moe_pct = (median_household_incomeM / median_household_incomeE) * 100,
med_income_confi = case_when(
med_income_moe_pct > .05 ~ "High Confidence (<5%)",
med_income_moe_pct < .05 & median_household_incomeM >.10 ~ "Moderate Confidence (5% - 10%)",
med_income_moe_pct < .1  ~ "Low Confidence (>10%)"
)
)
MI_county_reliablility <- county_data_2022 %>%
mutate(
med_income_moe_pct = (median_household_incomeM / median_household_incomeE) * 100,
med_income_confi = case_when(
med_income_moe_pct > .05 ~ "High Confidence (<5%)",
med_income_moe_pct < .05 & med_income_moe_pct >.10 ~ "Moderate Confidence (5% - 10%)",
med_income_moe_pct < .1  ~ "Low Confidence (>10%)"
)
)
MI_county_reliablility <- county_data_2022 %>%
mutate(
med_income_moe_pct = (median_household_incomeM / median_household_incomeE) * 100,
med_income_confi = case_when(
med_income_moe_pct < 5 ~ "High Confidence (<5%)",
med_income_moe_pct > 5 & med_income_moe_pct <10 ~ "Moderate Confidence (5% - 10%)",
med_income_moe_pct > 10  ~ "Low Confidence (>10%)"
)
)
?count
?mutate
MI_reability_data <- MI_county_reliablility %>%
count(med_income_confi)
View(MI_reability_data)
MI_reability_data <- MI_county_reliablility %>%
count(med_income_confi)%>%
mutate(n/sum(n)*100)
MI_reability_data <- MI_county_reliablility %>%
count(med_income_confi)%>%
mutate(percentage = n/sum(n)*100)
