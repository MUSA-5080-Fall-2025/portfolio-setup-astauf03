bins = 30,
fill = "darkseagreen",
color = "azure3",
alpha = 0.8
) +
labs(
title = "Distribution of Distance to Nearest Hospital",
subtitle = "Among Vulnerable Census Tracts in Pennsylvania",
x = "Distance to Nearest Hospital (miles)",
y = "Number of Tracts",
caption = "Data: ACS 2022, PA Dept. of Health Hospital Locations"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 10)
)
# Load your additional dataset
philly_county <- pa_counties_proj %>%
filter(COUNTY_NAM == "PHILADELPHIA")
philly_schools <- st_read("data/Schools.geojson")
st_crs(philly_schools) # check CRS
philly_schools <- st_transform(philly_schools, 3365)
# Filter schools by type
dist_school <- philly_schools %>%
filter(type_specific == "DISTRICT")
chart_school <- philly_schools %>%
filter(type_specific == "CHARTER")
priv_school <- philly_schools %>%
filter(type_specific == "PRIVATE")
# Get demographic data
philly_vars <- c(
median_income = "B19013_001",
male_5_9 = "B01001_004",
female_5_9 = "B01001_028",
male_10_14 = "B01001_005",
female_10_14 = "B01001_029",
male_15_17 = "B01001_006",
female_15_17 = "B01001_030"
)
philly_acs <- get_acs(
geography = "tract",
variables = philly_vars,
state = "PA",
county = "Philadelphia",
year = 2022,
survey = "acs5",
output = "wide"
) %>%
mutate(
school_age_pop = male_5_9E + female_5_9E +
male_10_14E + female_10_14E +
male_15_17E + female_15_17E,
inc_cat = case_when(
median_incomeE < 40000 ~ "Low",
median_incomeE < 80000 ~ "Medium",
TRUE ~ "High"
)
) %>%
select(GEOID, median_incomeE, school_age_pop, inc_cat)
nrow(dist_school)
nrow(chart_school)
nrow(priv_school)
nrow(philly_acs)
# Your spatial analysis
philly_tracts_geo <- pa_census_proj %>%
filter(COUNTYFP == "101")
philly_tracts_geo <- philly_tracts_geo %>%
left_join(philly_acs, by = "GEOID")
philly_tract_centers <- st_centroid(philly_tracts_geo)
# --- Join ACS data to Philly census tracts (with geometry) ---
# Get Philadelphia tracts with geometry from TIGRIS
philly_tracts_geo <- tracts(state = "PA", county = "Philadelphia", cb = TRUE)
philly_tracts_geo <- st_transform(philly_tracts_geo, 3365)
# Join income + child population data to tract geometry
philly_tracts_geo <- left_join(philly_tracts_geo, philly_acs, by = "GEOID")
# --- Create centroids for distance calculations ---
philly_tract_centers <- st_centroid(philly_tracts_geo)
# --- Calculate nearest school distances for each tract ---
# Convert school datasets to same CRS (double-check)
dist_school <- st_transform(dist_school, 3365)
chart_school <- st_transform(chart_school, 3365)
priv_school <- st_transform(priv_school, 3365)
nearest_miles <- function(from, to) {
d <- st_distance(from, to)
apply(d, 1, min) / 5280  # feet to miles
}
philly_tract_centers <- philly_tract_centers %>%
mutate(
dist_to_district_mi = nearest_miles(geometry, dist_school),
dist_to_charter_mi  = nearest_miles(geometry, chart_school),
dist_to_private_mi  = nearest_miles(geometry, priv_school)
)
# --- Summary statistics ---
summary(philly_tract_centers$dist_to_district_mi)
summary(philly_tract_centers$dist_to_charter_mi)
summary(philly_tract_centers$dist_to_private_mi)
school_dist_summary <- philly_tract_centers %>%
st_set_geometry(NULL) %>%  # remove geometry for summarizing
group_by(inc_cat) %>%
summarise(
avg_district = mean(dist_to_district_mi, na.rm = TRUE),
avg_charter  = mean(dist_to_charter_mi, na.rm = TRUE),
avg_private  = mean(dist_to_private_mi, na.rm = TRUE)
)
print(school_dist_summary)
school_dist_long <- school_dist_summary %>%
pivot_longer(
cols = starts_with("avg_"),
names_to = "school_type",
values_to = "avg_distance_mi"
) %>%
mutate(
school_type = recode(school_type,
"avg_district" = "District",
"avg_charter"  = "Charter",
"avg_private"  = "Private")
)
# Plot
ggplot(school_dist_long, aes(x = inc_cat, y = avg_distance_mi, fill = school_type)) +
geom_col(position = "dodge") +
labs(
title = "Average Distance to Nearest School by Income Category",
subtitle = "District, Charter, and Private Schools in Philadelphia",
x = "Income Category",
y = "Average Distance (miles)",
fill = "School Type"
) +
theme_minimal(base_size = 13) +
scale_fill_manual(values = c(
"District" = "#1f77b4",
"Charter"  = "#ff7f0e",
"Private"  = "#9467bd"
))
ggplot() +
geom_sf(data = philly_tracts_geo, aes(fill = median_incomeE), color = NA) +
geom_sf(data = dist_school, color = "blue", size = 1, shape = 21, fill = "blue") +
geom_sf(data = chart_school, color = "orange", size = 1, shape = 21, fill = "orange") +
geom_sf(data = priv_school, color = "purple", size = 1, shape = 21, fill = "purple") +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = "School Locations and Income Distribution in Philadelphia",
fill = "Median Income ($)",
caption = "Data: 2022 ACS & OpenDataPhilly Schools"
) +
theme_void()
school_dist_summary
#| include: false
# Load required packages
library(sf)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(tigris)
library(tidycensus)
census_api_key("eeb46a4e68d059982c2b048f843063e19bc4c294")
# Load spatial data
pa_counties <- st_read("data/Pennsylvania_County_Boundaries.shp") #county boundary shapefile from week class lab
pa_hospitals <- st_read("data/hospitals.geojson") #from class lab
pa_districts <- st_read("data/districts.geojson") #just in case
pa_census <- tracts(state = "PA", cb = TRUE) #TIGRIS package
# Check that all data loaded correctly
st_crs(pa_census) ==st_crs(pa_districts)
st_crs(pa_census) == st_crs(pa_hospitals)
st_crs(pa_census) # NAD83
st_crs(pa_counties) #WGS 84
st_crs(pa_districts) #WGS 84
st_crs(pa_hospitals)#WGS 84
pa_census_proj <- st_transform(pa_census, 3365)
pa_hospitals_proj <- st_transform(pa_hospitals, 3365)
pa_districts_proj <- st_transform(pa_districts, 3365)
pa_counties_proj <- st_transform(pa_counties, 3365)
st_crs(pa_hospitals_proj) ## PA south is good for PA analysis
nrow(pa_hospitals)
nrow(pa_census)
st_crs(pa_hospitals)
st_crs(pa_census_proj)$epsg == st_crs(pa_hospitals_proj)$epsg
# Get demographic data from ACS
vars <- c(tot_pop = "B01003_001", #total population
med_inc = "B19013_001", #median household income
#males 65+
m65_66 = "B01001_020",
m67_69 = "B01001_021",
m70_74 = "B01001_022",
m75_79 = "B01001_023",
m80_84 = "B01001_024",
m85_ovr = "B01001_025",
#females 65+
f65_66 = "B01001_044", f67_69 = "B01001_045", f70_74 = "B01001_046", f75_79 = "B01001_047", f80_84 = "B01001_048", f85_ovr = "B01001_049"
)
PA_tracts <- get_acs(geography = "tract",
state = "PA",
variables = vars,
year = 2022,
survey = "acs5",
output = "wide")
# Join to tract boundaries
PA_tracts <- PA_tracts %>%
mutate(pop65_over = (m65_66E + m67_69E + m70_74E + m75_79E + m80_84E + m85_ovrE + f65_66E + f67_69E + f70_74E + f75_79E + f80_84E + f85_ovrE ))
PA_tracts_proj <- pa_census %>%
left_join(PA_tracts, by = "GEOID") %>%
st_transform(3365) %>%
mutate(pct_65_over = pop65_over / tot_popE)
summary(PA_tracts_proj$med_incE)
summary(PA_tracts_proj$med_incE)
summary(PA_tracts_proj$pct_65_over)
agethres <- quantile(PA_tracts_proj$pct_65_over, probs = .25, na.rm = TRUE)
inc_thres <- quantile(PA_tracts_proj$med_incE, probs = .75, na.rm = TRUE)
# Filter for vulnerable tracts based on your criteria
PA_tracts_proj <- PA_tracts_proj %>%
mutate(
low_income = med_incE <= inc_thres,   #low inc
older_pop = pct_65_over >= agethres,   #high age
vulnerable = low_income & older_pop #both
)
summary(PA_tracts_proj$med_incE)
summary(PA_tracts_proj$pct_65_over)
nrow(PA_tracts_proj %>%
filter(vulnerable == TRUE))
total_tracts <- nrow(PA_tracts_proj)
vulnerable_count <- sum(PA_tracts_proj$vulnerable == TRUE, na.rm = TRUE)
vulnerable_pct <- (vulnerable_count / total_tracts) * 100
cat("Total tracts:", total_tracts, "\n")
cat("Vulnerable tracts:", vulnerable_count, "\n")
cat("Percentage:", round(vulnerable_pct, 2), "%")
# Transform to appropriate projected CRS
vul_tracts <- PA_tracts_proj %>%
filter(vulnerable == TRUE)
vul_tracts_project <- st_transform(vul_tracts, crs = 3365)
pa_hospitals_proj <- st_transform(pa_hospitals, 3365)
# Calculate distance from each tract centroid to nearest hospital
tract_center <- st_centroid(vul_tracts_project)
nearest <- st_distance(tract_center, pa_hospitals_proj)
nearest_mi <- apply(nearest, 1, min) / 5280  # 5280 ft in a mile
vul_tracts_project$nearest_hosp_mi <- nearest_mi
mean(vul_tracts_project$nearest_hosp_mi,na.rm = TRUE)
max(vul_tracts_project$nearest_hosp_mi,na.rm = TRUE)
sum(vul_tracts_project$nearest_hosp_mi > 15, na.rm = TRUE)
# Create underserved variable
vul_tracts_project <- vul_tracts_project %>%
mutate(underserved = nearest_hosp_mi >15)
pct_underserved <- (sum(vul_tracts_project$underserved) / nrow(tract_center)) * 100
pct_underserved
sum(vul_tracts_project$underserved)
# Spatial join tracts to counties
tracts_count <- st_join(vul_tracts_project, pa_counties_proj[, c("COUNTY_NAM")], join = st_within)
# Aggregate statistics by county
county_summary <- tracts_count %>%
filter(!is.na(COUNTY_NAM))%>%
st_set_geometry(NULL) %>%
group_by(COUNTY_NAM) %>%
summarise(
n_vulnerable = n(),
n_underserved = sum(underserved),
pct_underserved = (n_underserved / n_vulnerable) * 100,
avg_dist_mi = mean(nearest_hosp_mi),
total_vulnerable_pop = sum(pop65_over),
vul_far = sum(ifelse(underserved, pop65_over, 0))
) %>%
arrange(desc(pct_underserved))
top5_pct <- county_summary %>%
arrange(desc(pct_underserved)) %>%
slice(1:5) %>%
select(COUNTY_NAM, pct_underserved)
view(top5_pct)
top5_vul_far <- county_summary %>%
arrange(desc(vul_far))%>%
slice(1:5) %>%
select(COUNTY_NAM, vul_far)
view(top5_vul_far)
# Create and format priority counties table
library(knitr)
library(dplyr)
library(kableExtra)
# choose top 10 counties by % underserved OR by vulnerable population far from hospitals
priority_counties <- county_summary %>%
arrange(desc(pct_underserved), desc(vul_far)) %>%
slice(1:10) %>%
select(
COUNTY_NAM,
n_vulnerable,
n_underserved,
pct_underserved,
avg_dist_mi,
total_vulnerable_pop,
vul_far
) %>%
mutate(
pct_underserved = round(pct_underserved, 1),
avg_dist_mi = round(avg_dist_mi, 2),
total_vulnerable_pop = format(total_vulnerable_pop, big.mark = ","),
vul_far = format(vul_far, big.mark = ",")
)
kable(
priority_counties,
caption = "<div style='text-align: center; color: black;'><b>Top 10 Priority Counties for Healthcare Investment in Pennsylvania</b></div>",
col.names = c(
"County",
"Vulnerable Tracts",
"Underserved Tracts",
"% Underserved",
"Avg Distance to Hospital (mi)",
"Total Vulnerable Population",
"Vulnerable Pop. Far from Hospital"
),
align = "lcccccr"
) %>%
kable_styling(
bootstrap_options = c("striped"))%>%
row_spec(0, bold = TRUE, background = "#E69F15", color = "white")
# Create county-level access map
pa_count_mp <- pa_counties_proj %>%
left_join(county_summary, by = c("COUNTY_NAM"))
ggplot() +
geom_sf(data = pa_count_mp, aes(fill = pct_underserved), color = "white", size = 0.3) +
geom_sf(data = pa_hospitals_proj, color = "red", size = 1, shape = 21, fill = "yellow") +
scale_fill_distiller(
palette = "RdYlBu",
direction = -1,
name = "% Underserved\n(Vulnerable Tracts)",
na.value = "gray90",
labels = function(x) paste0(round(x), "%")
) +
labs(
title = "County-Level Healthcare Access Challenges",
subtitle = "Percent of vulnerable census tracts located >15 miles from nearest hospital",
caption = "2022 ACS Data, PA counties, hospitals, and districts"
) +
theme_void() +
theme(
legend.position = "right",
plot.title = element_text(size = 16, face = "bold")
)
# Create detailed tract-level map
tracts_underserved_map <- vul_tracts_project %>%
st_join(pa_counties_proj[, c("COUNTY_NAM")], join = st_within)
ggplot() +
geom_sf(data = pa_counties_proj, fill = "grey95", color = "black", linewidth = 0.3) +
geom_sf(
data = tracts_underserved_map,
aes(fill = ifelse(underserved, "Underserved-Vulnerable", "Vulnerable")),
color = NA, alpha = 0.9
) +
geom_sf(data = pa_hospitals_proj, color = "navy", size = 1, shape = 21, fill = "blue") +
scale_fill_manual(
name = "Tract Type",
values = c("Underserved-Vulnerable" = "darkred", "Vulnerable" = "darkorange"),
na.translate = FALSE
) +
labs(
title = "Underserved Vulnerable Census Tracts in Pennsylvania",
subtitle = "Tracts more than 15 miles from the nearest hospital",
caption = "Data: ACS 2023, PA Dept. of Health Hospital Locations"
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 9),
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 10)
)
# Create distribution visualization
ggplot(vul_tracts_project, aes(x = nearest_hosp_mi)) +
geom_histogram(
bins = 30,
fill = "darkseagreen",
color = "azure3",
alpha = 0.8
) +
labs(
title = "Distribution of Distance to Nearest Hospital",
subtitle = "Among Vulnerable Census Tracts in Pennsylvania",
x = "Distance to Nearest Hospital (miles)",
y = "Number of Tracts",
caption = "Data: ACS 2022, PA Dept. of Health Hospital Locations"
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(size = 10)
)
# Load your additional dataset
philly_county <- pa_counties_proj %>%
filter(COUNTY_NAM == "PHILADELPHIA")
philly_schools <- st_read("data/Schools.geojson")
st_crs(philly_schools) # check CRS
philly_schools <- st_transform(philly_schools, 3365)
# Filter schools by type
dist_school <- philly_schools %>%
filter(type_specific == "DISTRICT")
chart_school <- philly_schools %>%
filter(type_specific == "CHARTER")
priv_school <- philly_schools %>%
filter(type_specific == "PRIVATE")
# Get demographic data
philly_vars <- c(
median_income = "B19013_001",
male_5_9 = "B01001_004",
female_5_9 = "B01001_028",
male_10_14 = "B01001_005",
female_10_14 = "B01001_029",
male_15_17 = "B01001_006",
female_15_17 = "B01001_030"
)
philly_acs <- get_acs(
geography = "tract",
variables = philly_vars,
state = "PA",
county = "Philadelphia",
year = 2022,
survey = "acs5",
output = "wide"
) %>%
mutate(
school_age_pop = male_5_9E + female_5_9E +
male_10_14E + female_10_14E +
male_15_17E + female_15_17E,
inc_cat = case_when(
median_incomeE < 40000 ~ "Low",
median_incomeE < 80000 ~ "Medium",
TRUE ~ "High"
)
) %>%
select(GEOID, median_incomeE, school_age_pop, inc_cat)
nrow(dist_school)
nrow(chart_school)
nrow(priv_school)
nrow(philly_acs)
# Your spatial analysis
philly_tracts_geo <- pa_census_proj %>%
filter(COUNTYFP == "101")
philly_tracts_geo <- philly_tracts_geo %>%
left_join(philly_acs, by = "GEOID")
philly_tract_centers <- st_centroid(philly_tracts_geo)
# --- Join ACS data to Philly census tracts (with geometry) ---
# Get Philadelphia tracts with geometry from TIGRIS
philly_tracts_geo <- tracts(state = "PA", county = "Philadelphia", cb = TRUE)
philly_tracts_geo <- st_transform(philly_tracts_geo, 3365)
# Join income + child population data to tract geometry
philly_tracts_geo <- left_join(philly_tracts_geo, philly_acs, by = "GEOID")
# --- Create centroids for distance calculations ---
philly_tract_centers <- st_centroid(philly_tracts_geo)
# --- Calculate nearest school distances for each tract ---
# Convert school datasets to same CRS (double-check)
dist_school <- st_transform(dist_school, 3365)
chart_school <- st_transform(chart_school, 3365)
priv_school <- st_transform(priv_school, 3365)
nearest_miles <- function(from, to) {
d <- st_distance(from, to)
apply(d, 1, min) / 5280  # feet to miles
}
philly_tract_centers <- philly_tract_centers %>%
mutate(
dist_to_district_mi = nearest_miles(geometry, dist_school),
dist_to_charter_mi  = nearest_miles(geometry, chart_school),
dist_to_private_mi  = nearest_miles(geometry, priv_school)
)
# --- Summary statistics ---
summary(philly_tract_centers$dist_to_district_mi)
summary(philly_tract_centers$dist_to_charter_mi)
summary(philly_tract_centers$dist_to_private_mi)
school_dist_summary <- philly_tract_centers %>%
st_set_geometry(NULL) %>%  # remove geometry for summarizing
group_by(inc_cat) %>%
summarise(
avg_district = mean(dist_to_district_mi, na.rm = TRUE),
avg_charter  = mean(dist_to_charter_mi, na.rm = TRUE),
avg_private  = mean(dist_to_private_mi, na.rm = TRUE)
)
print(school_dist_summary)
school_dist_long <- school_dist_summary %>%
pivot_longer(
cols = starts_with("avg_"),
names_to = "school_type",
values_to = "avg_distance_mi"
) %>%
mutate(
school_type = recode(school_type,
"avg_district" = "District",
"avg_charter"  = "Charter",
"avg_private"  = "Private")
)
# Plot
ggplot(school_dist_long, aes(x = inc_cat, y = avg_distance_mi, fill = school_type)) +
geom_col(position = "dodge") +
labs(
title = "Average Distance to Nearest School by Income Category",
subtitle = "District, Charter, and Private Schools in Philadelphia",
x = "Income Category",
y = "Average Distance (miles)",
fill = "School Type"
) +
theme_minimal(base_size = 13) +
scale_fill_manual(values = c(
"District" = "#1f77b4",
"Charter"  = "#ff7f0e",
"Private"  = "#9467bd"
))
ggplot() +
geom_sf(data = philly_tracts_geo, aes(fill = median_incomeE), color = NA) +
geom_sf(data = dist_school, color = "blue", size = 1, shape = 21, fill = "blue") +
geom_sf(data = chart_school, color = "orange", size = 1, shape = 21, fill = "orange") +
geom_sf(data = priv_school, color = "purple", size = 1, shape = 21, fill = "purple") +
scale_fill_viridis_c(option = "plasma", direction = -1) +
labs(
title = "School Locations and Income Distribution in Philadelphia",
fill = "Median Income ($)",
caption = "Data: 2022 ACS & OpenDataPhilly Schools"
) +
theme_void()
school_dist_summary
